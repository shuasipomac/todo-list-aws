pipeline {
    agent any
    
    environment {
        STACK_NAME = 'staging-todo-list-aws-develop'
        AWS_REGION = 'us-east-1'
        S3_BUCKET = 'aws-sam-cli-managed-default-samclisourcebucket-cxher468fqlw'
        S3_PREFIX = 'staging'
        STAGE = 'staging'

        GITHUB_TOKEN = credentials('MiTokenDeGitHub')
    }

    stages {
        stage('Get Code') {
          agent any
          steps {
                echo 'Inicio de la clonación del código fuente!!!'
                sh 'whoami'
                sh 'hostname'
                git branch: 'develop', url: 'https://github.com/shuasipomac/todo-list-aws.git', credentialsId: 'MiTokenDeGitHub'
                //git branch: 'develop', url: 'https://MiTokenDeGitHub@github.com/shuasipomac/todo-list-aws.git'

                sh 'pwd'
                stash includes: 'src/**', name: 'd_src'
                stash includes: 'test/**', name: 'd_test'
                }
        }

         stage ('Test') {
             agent {
                  label 'agente1'
             }
    
            stages {
              stage('Static Test'){
                  steps{
                      sh """
                         echo 'Host name, User and Workspace'
                         hostname
                         whoami
                         pwd
                       """
                       unstash 'd_src'
                          
                       catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                       sh "flake8 \
                           --exit-zero \
                           --format=pylint \
                           --max-line-length=100 \
                           src > flake8.out"
                                        
                             recordIssues(
                             tools: [flake8(name: 'Flake8', pattern: 'flake8.out')],
                             qualityGates: [
                             [threshold: 9999, type: 'TOTAL', unstable: false],
                             [threshold: 9999, type: 'TOTAL', unstable: true]
                             ]
                             )
                         }
                      }
                 } 
    
              stage('Security Test'){
                   steps{
                          sh "pwd"
                          sh "whoami"
                          unstash 'd_test'
    
                          catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {    
                              sh "python -m bandit --exit-zero -r src -f custom -o bandit.out --severity-level medium --msg-template '{abspath}:{line}: {severity}: {test_id}: {msg}'"
                              recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 90, type: 'TOTAL', unstable: true], [threshold: 100, type: 'TOTAL', unstable: false]]
                          }
                    }
              }
            }
        }

        stage('SAM Deploy'){
            agent any
            steps{
              catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {  
                    sh """
                        echo 'Host name:'; hostname
                        echo 'User:'; whoami
                        echo 'Workspace:'; pwd
                    """
    
                    //sam build command
                    sh "sam build"
    
                    sleep(time: 1, unit: 'SECONDS')
    
                    //sam deploy command
                      sh "sam deploy \
                        --template-file template.yaml \
                        --stack-name ${env.STACK_NAME} \
                        --region ${env.AWS_REGION} \
                        --capabilities CAPABILITY_IAM \
                        --parameter-overrides Stage=${env.STAGE} \
                        --no-fail-on-empty-changeset \
                        --s3-bucket ${env.S3_BUCKET} \
                        --s3-prefix ${env.S3_PREFIX} \
                        --no-confirm-changeset"
                }
            }
        }

        stage('Rest Tests') {
            agent {
                label 'agente2'
            }
            steps {
                script {
                    echo "Inicio de stage Rest Tests"
                    sh 'whoami'
                    sh 'hostname'
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        sh '''
                            #!/bin/bash
    
                            # Muestra la salida del Stage y Region
                            echo "Input 1 'stage' value: ${STAGE}"
                            echo "Input 2 'region' value: ${AWS_REGION}"
    
                            # Describe CloudFormation stacks y captura la salida
                            outputs=$(aws cloudformation describe-stacks --stack-name ${STAGE}-todo-list-aws --region ${AWS_REGION}  | jq '.Stacks[0].Outputs')
                        
                            # Extrae el valor de BaseUrlApi usando jq
                            BASE_URL_API=$(echo "$outputs" | jq -r '.[] | select(.OutputKey=="BaseUrlApi") | .OutputValue')
                        
                            # Muestra el valor de BaseUrlApi
                            echo $BASE_URL_API
    
                            # Setea en el entorno la URL
                            export BASE_URL=$BASE_URL_API
    
                            # Ejecuta las pruebas
                            pytest --junitxml=result-rest.xml test/integration/todoApiTest.py
                        '''
                        
                        // Muestra el resultado
                        junit 'result*.xml'
                    }
                }
            }
        }


      stage('Promote') {
       agent any     
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    withCredentials([string(credentialsId: 'MiTokenDeGitHub', variable: 'PAT')]) {
                        sh """
                            echo 'STAGE --> Promote merge to master'
                            echo 'Host name:'; hostname
                            echo 'User:'; whoami
                            echo 'Workspace:'; pwd
                        """

                        script {
                            // Configuración de git
                            sh "git config --global user.email 'shuasipomac.devops@gmail.com'"
                            sh "git config --global user.name 'shuasipomac'"

                            //Eliminar cualquier cambio en el directorio de trabajo
                            sh "git checkout -- ."

                            //Hacer checkout a master y obtener la última versión desde el origen
                            sh "git checkout master"
                            sh "git pull https://\$PAT@github.com/shuasipomac/todo-list-aws.git  master"
                                                                                 
                            //Hacer checkout a develop y obtener la última versión desde el origen
                            sh "git checkout develop"
                            sh "git pull https://\$PAT@github.com/shuasipomac/todo-list-aws.git  develop"
                                                    
                            //Checkout master
                            sh "git checkout master"

                            //Merge develop en master
                            def mergeStatus = sh(script: "git merge develop", returnStatus: true)

                            //En caso de conflicto en el Merge o si dió Error el Merge
                            if (mergeStatus){
                                //Mensaje de error para conflicto o error en la ejecución del merge
                                sh "echo 'Error: Merge conflict or other error occurred during git merge.'"
                                //Abort merge
                                sh "git merge --abort"

                                //Lanzar el merge nuevamente y mantener los archivos en master en caso de conflicto
                                sh "git merge develop -X ours --no-commit"
                                //Restaurar el archivo Jenkinsfile con la versión del master
                                sh "git checkout --ours Jenkinsfile"
                                sh "git add Jenkinsfile"
                                sh "git commit -m 'Merged develop into master, excluding Jenkinsfile'"
                            }
                            else {
                                sh "echo 'Merge completed successfully.'"
                            }
                            
                            //Push del resultado del merge result a master
                            sh "git push https://\$PAT@github.com/shuasipomac/todo-list-aws.git master"
                                                    
                        }
                    }
                }
            }
        }
      
    }
}

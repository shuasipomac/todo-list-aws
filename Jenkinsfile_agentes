pipeline {
    agent any
    
    environment {
        STACK_NAME = 'todo-list-aws-production'        
        AWS_REGION = 'us-east-1'
        S3_BUCKET = 'aws-sam-cli-managed-default-samclisourcebucket-cxher468fqlw'
        S3_PREFIX = 'todo-list-aws'
        STAGE = 'production'

        GITHUB_TOKEN = credentials('MiTokenDeGitHub')
    }

    stages {
        stage('Get Code') {
          agent any
          steps {
                echo 'Inicio de la clonación del código fuente!!!'
                sh 'whoami'
                sh 'hostname'
                git branch: 'master', url: 'https://github.com/shuasipomac/todo-list-aws.git', credentialsId: 'MiTokenDeGitHub'
                //git branch: 'master', url: 'https://github.com/shuasipomac/todo-list-aws.git'

                sh 'pwd'
                stash includes: 'src/**', name: 'd_src'
                stash includes: 'test/**', name: 'd_test'
            }
        }

        stage('SAM Deploy'){
            agent any
            steps{
                sh """
                    echo 'Host name:'; hostname
                    echo 'User:'; whoami
                    echo 'Workspace:'; pwd
                """

                //sam build command
                sh "sam build"

                sleep(time: 1, unit: 'SECONDS')

              //  sam deploy command
                  //sh "sam deploy \
                  //    --region ${env.AWS_REGION} \
                  //    --config-env ${env.STAGE} \
                  //    --template-file template.yaml \
                  //    --config-file samconfig.toml \
                  //    --no-fail-on-empty-changeset \
                  //    --no-confirm-changeset"
                
                    sh "sam deploy \
                            --template-file template.yaml \
                            --stack-name ${env.STACK_NAME} \
                            --region ${env.AWS_REGION} \
                            --capabilities CAPABILITY_IAM \
                            --parameter-overrides Stage=${env.STAGE} \
                            --no-fail-on-empty-changeset \
                            --s3-bucket ${env.S3_BUCKET} \
                            --s3-prefix ${env.S3_PREFIX} \
                            --no-confirm-changeset"
            }
        }

        stage('Rest Tests') {
           agent {
                label 'agente2'
            }
            steps {
                script {
                    echo "Inicio de stage Rest Tests"
                    sh 'whoami'
                    sh 'hostname'
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        sh '''
                            #!/bin/bash
    
                            # Muestra la salida del Stage y Region
                            echo "Input 1 'stage' value: ${STAGE}"
                            echo "Input 2 'region' value: ${AWS_REGION}"
    
                            # Describe CloudFormation stacks y captura la salida
                            outputs=$(aws cloudformation describe-stacks --stack-name ${STAGE}-todo-list-aws --region ${AWS_REGION}  | jq '.Stacks[0].Outputs')
                        
                            # Extrae el valor de BaseUrlApi usando jq
                            BASE_URL_API=$(echo "$outputs" | jq -r '.[] | select(.OutputKey=="BaseUrlApi") | .OutputValue')
                        
                            # Muestra el valor de BaseUrlApi
                            echo $BASE_URL_API
    
                            # Setea en el entorno la URL
                            export BASE_URL=$BASE_URL_API
    
                            # Ejecuta las pruebas
                            pytest --junitxml=result-rest.xml test/integration/todoApiTest.py -m smoke
                        '''
                        
                        // Muestra el resultado
                        junit 'result*.xml'
                    }
                }
            }
        }

        
    }
}

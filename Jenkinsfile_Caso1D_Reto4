pipeline {
    agent any
    
    environment {
        AWS_REGION = 'us-east-1'
        STAGE = 'production'

        GITHUB_TOKEN = credentials('MiTokenDeGitHub')
    }

    stages {
        stage('Get Code') {
          steps {
                echo 'Inicio de la clonación del código fuente!!!'
                // Mueve el contenido del repositorio 2 al repositorio 1
                
                // Checkout first repository todo-list-aws
                dir('todo-list-aws') {
                     git branch: 'master', url: 'https://github.com/shuasipomac/todo-list-aws.git', credentialsId: 'MiTokenDeGitHub'
                }
                    
                // Checkout second repository todo-list-aws-config
                dir('todo-list-aws-config') {
                    git branch: 'production', url: 'https://github.com/shuasipomac/todo-list-aws-config.git'
                }
                    
                // Move contents of repo2 into repo1
                   sh 'cp -r todo-list-aws-config/* todo-list-aws/'
                  
           }
        }
   
            
      stage('SAM Deploy'){
           steps{
              catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {  
                    sh """
                        echo 'Host name:'; hostname
                        echo 'User:'; whoami
                        echo 'Workspace:'; pwd
                    """
    
                    //sam build command
                    sh "sam build"
    
                    sleep(time: 1, unit: 'SECONDS')
    
                    //sam deploy command
                      sh "sam deploy \
                          --region ${env.AWS_REGION} \
                          --config-env ${env.STAGE} \
                          --template-file template.yaml \
                          --config-file samconfig.toml \
                          --no-fail-on-empty-changeset \
                          --no-confirm-changeset"
             
        
               }
            }
        }

        stage('Rest Tests') {
             steps {
                script {
                    echo "Inicio de stage Rest Tests"
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        sh '''
                            #!/bin/bash
    
                            # Muestra la salida del Stage y Region
                            echo "Input 1 'stage' value: ${STAGE}"
                            echo "Input 2 'region' value: ${AWS_REGION}"
    
                            # Describe CloudFormation stacks y captura la salida
                            outputs=$(aws cloudformation describe-stacks --stack-name ${STAGE}-todo-list-aws --region ${AWS_REGION}  | jq '.Stacks[0].Outputs')
                        
                            # Extrae el valor de BaseUrlApi usando jq
                            BASE_URL_API=$(echo "$outputs" | jq -r '.[] | select(.OutputKey=="BaseUrlApi") | .OutputValue')
                        
                            # Muestra el valor de BaseUrlApi
                            echo $BASE_URL_API
    
                            # Setea en el entorno la URL
                            export BASE_URL=$BASE_URL_API
    
                            # Ejecuta las pruebas
                            pytest --junitxml=result-rest.xml test/integration/todoApiTest.py
                        '''
                        
                        // Muestra el resultado
                        junit 'result*.xml'
                    }
                }
            }
        }


             
    }
}
